// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package eu.flutter.netguard;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class NativeBridge {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /**
   * MODELS
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class VpnConfig {
    /** List of PackageNames that are filtered by the firewall */
    private @NonNull List<String> filteredPackages;

    public @NonNull List<String> getFilteredPackages() {
      return filteredPackages;
    }

    public void setFilteredPackages(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filteredPackages\" is null.");
      }
      this.filteredPackages = setterArg;
    }

    /** List of PackageNames that are completely blocked by the firewall */
    private @NonNull List<String> blockedPackages;

    public @NonNull List<String> getBlockedPackages() {
      return blockedPackages;
    }

    public void setBlockedPackages(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"blockedPackages\" is null.");
      }
      this.blockedPackages = setterArg;
    }

    /** List of rules that apply for individual packages */
    private @NonNull List<Rule> packageRules;

    public @NonNull List<Rule> getPackageRules() {
      return packageRules;
    }

    public void setPackageRules(@NonNull List<Rule> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"packageRules\" is null.");
      }
      this.packageRules = setterArg;
    }

    /** Rule that applies for all applications */
    private @Nullable Rule globalRule;

    public @Nullable Rule getGlobalRule() {
      return globalRule;
    }

    public void setGlobalRule(@Nullable Rule setterArg) {
      this.globalRule = setterArg;
    }

    private @NonNull Boolean filterUdp;

    public @NonNull Boolean getFilterUdp() {
      return filterUdp;
    }

    public void setFilterUdp(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filterUdp\" is null.");
      }
      this.filterUdp = setterArg;
    }

    private @NonNull Long logLevel;

    public @NonNull Long getLogLevel() {
      return logLevel;
    }

    public void setLogLevel(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"logLevel\" is null.");
      }
      this.logLevel = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    VpnConfig() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      VpnConfig that = (VpnConfig) o;
      return filteredPackages.equals(that.filteredPackages) && blockedPackages.equals(that.blockedPackages) && packageRules.equals(that.packageRules) && Objects.equals(globalRule, that.globalRule) && filterUdp.equals(that.filterUdp) && logLevel.equals(that.logLevel);
    }

    @Override
    public int hashCode() {
      return Objects.hash(filteredPackages, blockedPackages, packageRules, globalRule, filterUdp, logLevel);
    }

    public static final class Builder {

      private @Nullable List<String> filteredPackages;

      @CanIgnoreReturnValue
      public @NonNull Builder setFilteredPackages(@NonNull List<String> setterArg) {
        this.filteredPackages = setterArg;
        return this;
      }

      private @Nullable List<String> blockedPackages;

      @CanIgnoreReturnValue
      public @NonNull Builder setBlockedPackages(@NonNull List<String> setterArg) {
        this.blockedPackages = setterArg;
        return this;
      }

      private @Nullable List<Rule> packageRules;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageRules(@NonNull List<Rule> setterArg) {
        this.packageRules = setterArg;
        return this;
      }

      private @Nullable Rule globalRule;

      @CanIgnoreReturnValue
      public @NonNull Builder setGlobalRule(@Nullable Rule setterArg) {
        this.globalRule = setterArg;
        return this;
      }

      private @Nullable Boolean filterUdp;

      @CanIgnoreReturnValue
      public @NonNull Builder setFilterUdp(@NonNull Boolean setterArg) {
        this.filterUdp = setterArg;
        return this;
      }

      private @Nullable Long logLevel;

      @CanIgnoreReturnValue
      public @NonNull Builder setLogLevel(@NonNull Long setterArg) {
        this.logLevel = setterArg;
        return this;
      }

      public @NonNull VpnConfig build() {
        VpnConfig pigeonReturn = new VpnConfig();
        pigeonReturn.setFilteredPackages(filteredPackages);
        pigeonReturn.setBlockedPackages(blockedPackages);
        pigeonReturn.setPackageRules(packageRules);
        pigeonReturn.setGlobalRule(globalRule);
        pigeonReturn.setFilterUdp(filterUdp);
        pigeonReturn.setLogLevel(logLevel);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(6);
      toListResult.add(filteredPackages);
      toListResult.add(blockedPackages);
      toListResult.add(packageRules);
      toListResult.add(globalRule);
      toListResult.add(filterUdp);
      toListResult.add(logLevel);
      return toListResult;
    }

    static @NonNull VpnConfig fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      VpnConfig pigeonResult = new VpnConfig();
      Object filteredPackages = pigeonVar_list.get(0);
      pigeonResult.setFilteredPackages((List<String>) filteredPackages);
      Object blockedPackages = pigeonVar_list.get(1);
      pigeonResult.setBlockedPackages((List<String>) blockedPackages);
      Object packageRules = pigeonVar_list.get(2);
      pigeonResult.setPackageRules((List<Rule>) packageRules);
      Object globalRule = pigeonVar_list.get(3);
      pigeonResult.setGlobalRule((Rule) globalRule);
      Object filterUdp = pigeonVar_list.get(4);
      pigeonResult.setFilterUdp((Boolean) filterUdp);
      Object logLevel = pigeonVar_list.get(5);
      pigeonResult.setLogLevel((Long) logLevel);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Application {
    private @NonNull Long uid;

    public @NonNull Long getUid() {
      return uid;
    }

    public void setUid(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uid\" is null.");
      }
      this.uid = setterArg;
    }

    private @NonNull String packageName;

    public @NonNull String getPackageName() {
      return packageName;
    }

    public void setPackageName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"packageName\" is null.");
      }
      this.packageName = setterArg;
    }

    private @NonNull String label;

    public @NonNull String getLabel() {
      return label;
    }

    public void setLabel(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"label\" is null.");
      }
      this.label = setterArg;
    }

    private @NonNull String version;

    public @NonNull String getVersion() {
      return version;
    }

    public void setVersion(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"version\" is null.");
      }
      this.version = setterArg;
    }

    private @Nullable byte[] icon;

    public @Nullable byte[] getIcon() {
      return icon;
    }

    public void setIcon(@Nullable byte[] setterArg) {
      this.icon = setterArg;
    }

    private @NonNull Boolean system;

    public @NonNull Boolean getSystem() {
      return system;
    }

    public void setSystem(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"system\" is null.");
      }
      this.system = setterArg;
    }

    private @Nullable ApplicationSetting setting;

    public @Nullable ApplicationSetting getSetting() {
      return setting;
    }

    public void setSetting(@Nullable ApplicationSetting setterArg) {
      this.setting = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Application() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      Application that = (Application) o;
      return uid.equals(that.uid) && packageName.equals(that.packageName) && label.equals(that.label) && version.equals(that.version) && Arrays.equals(icon, that.icon) && system.equals(that.system) && Objects.equals(setting, that.setting);
    }

    @Override
    public int hashCode() {
      int pigeonVar_result = Objects.hash(uid, packageName, label, version, system, setting);
      pigeonVar_result = 31 * pigeonVar_result + Arrays.hashCode(icon);
      return pigeonVar_result;
    }

    public static final class Builder {

      private @Nullable Long uid;

      @CanIgnoreReturnValue
      public @NonNull Builder setUid(@NonNull Long setterArg) {
        this.uid = setterArg;
        return this;
      }

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@NonNull String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      private @Nullable String label;

      @CanIgnoreReturnValue
      public @NonNull Builder setLabel(@NonNull String setterArg) {
        this.label = setterArg;
        return this;
      }

      private @Nullable String version;

      @CanIgnoreReturnValue
      public @NonNull Builder setVersion(@NonNull String setterArg) {
        this.version = setterArg;
        return this;
      }

      private @Nullable byte[] icon;

      @CanIgnoreReturnValue
      public @NonNull Builder setIcon(@Nullable byte[] setterArg) {
        this.icon = setterArg;
        return this;
      }

      private @Nullable Boolean system;

      @CanIgnoreReturnValue
      public @NonNull Builder setSystem(@NonNull Boolean setterArg) {
        this.system = setterArg;
        return this;
      }

      private @Nullable ApplicationSetting setting;

      @CanIgnoreReturnValue
      public @NonNull Builder setSetting(@Nullable ApplicationSetting setterArg) {
        this.setting = setterArg;
        return this;
      }

      public @NonNull Application build() {
        Application pigeonReturn = new Application();
        pigeonReturn.setUid(uid);
        pigeonReturn.setPackageName(packageName);
        pigeonReturn.setLabel(label);
        pigeonReturn.setVersion(version);
        pigeonReturn.setIcon(icon);
        pigeonReturn.setSystem(system);
        pigeonReturn.setSetting(setting);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(7);
      toListResult.add(uid);
      toListResult.add(packageName);
      toListResult.add(label);
      toListResult.add(version);
      toListResult.add(icon);
      toListResult.add(system);
      toListResult.add(setting);
      return toListResult;
    }

    static @NonNull Application fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      Application pigeonResult = new Application();
      Object uid = pigeonVar_list.get(0);
      pigeonResult.setUid((Long) uid);
      Object packageName = pigeonVar_list.get(1);
      pigeonResult.setPackageName((String) packageName);
      Object label = pigeonVar_list.get(2);
      pigeonResult.setLabel((String) label);
      Object version = pigeonVar_list.get(3);
      pigeonResult.setVersion((String) version);
      Object icon = pigeonVar_list.get(4);
      pigeonResult.setIcon((byte[]) icon);
      Object system = pigeonVar_list.get(5);
      pigeonResult.setSystem((Boolean) system);
      Object setting = pigeonVar_list.get(6);
      pigeonResult.setSetting((ApplicationSetting) setting);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ApplicationSetting {
    private @NonNull String packageName;

    public @NonNull String getPackageName() {
      return packageName;
    }

    public void setPackageName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"packageName\" is null.");
      }
      this.packageName = setterArg;
    }

    private @NonNull Boolean filter;

    public @NonNull Boolean getFilter() {
      return filter;
    }

    public void setFilter(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"filter\" is null.");
      }
      this.filter = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ApplicationSetting() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      ApplicationSetting that = (ApplicationSetting) o;
      return packageName.equals(that.packageName) && filter.equals(that.filter);
    }

    @Override
    public int hashCode() {
      return Objects.hash(packageName, filter);
    }

    public static final class Builder {

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@NonNull String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      private @Nullable Boolean filter;

      @CanIgnoreReturnValue
      public @NonNull Builder setFilter(@NonNull Boolean setterArg) {
        this.filter = setterArg;
        return this;
      }

      public @NonNull ApplicationSetting build() {
        ApplicationSetting pigeonReturn = new ApplicationSetting();
        pigeonReturn.setPackageName(packageName);
        pigeonReturn.setFilter(filter);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(2);
      toListResult.add(packageName);
      toListResult.add(filter);
      return toListResult;
    }

    static @NonNull ApplicationSetting fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      ApplicationSetting pigeonResult = new ApplicationSetting();
      Object packageName = pigeonVar_list.get(0);
      pigeonResult.setPackageName((String) packageName);
      Object filter = pigeonVar_list.get(1);
      pigeonResult.setFilter((Boolean) filter);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Forward {
    private @NonNull Long protocol;

    public @NonNull Long getProtocol() {
      return protocol;
    }

    public void setProtocol(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"protocol\" is null.");
      }
      this.protocol = setterArg;
    }

    private @NonNull Long dport;

    public @NonNull Long getDport() {
      return dport;
    }

    public void setDport(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"dport\" is null.");
      }
      this.dport = setterArg;
    }

    private @NonNull String raddr;

    public @NonNull String getRaddr() {
      return raddr;
    }

    public void setRaddr(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"raddr\" is null.");
      }
      this.raddr = setterArg;
    }

    private @NonNull Long rport;

    public @NonNull Long getRport() {
      return rport;
    }

    public void setRport(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"rport\" is null.");
      }
      this.rport = setterArg;
    }

    private @NonNull Long ruid;

    public @NonNull Long getRuid() {
      return ruid;
    }

    public void setRuid(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"ruid\" is null.");
      }
      this.ruid = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Forward() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      Forward that = (Forward) o;
      return protocol.equals(that.protocol) && dport.equals(that.dport) && raddr.equals(that.raddr) && rport.equals(that.rport) && ruid.equals(that.ruid);
    }

    @Override
    public int hashCode() {
      return Objects.hash(protocol, dport, raddr, rport, ruid);
    }

    public static final class Builder {

      private @Nullable Long protocol;

      @CanIgnoreReturnValue
      public @NonNull Builder setProtocol(@NonNull Long setterArg) {
        this.protocol = setterArg;
        return this;
      }

      private @Nullable Long dport;

      @CanIgnoreReturnValue
      public @NonNull Builder setDport(@NonNull Long setterArg) {
        this.dport = setterArg;
        return this;
      }

      private @Nullable String raddr;

      @CanIgnoreReturnValue
      public @NonNull Builder setRaddr(@NonNull String setterArg) {
        this.raddr = setterArg;
        return this;
      }

      private @Nullable Long rport;

      @CanIgnoreReturnValue
      public @NonNull Builder setRport(@NonNull Long setterArg) {
        this.rport = setterArg;
        return this;
      }

      private @Nullable Long ruid;

      @CanIgnoreReturnValue
      public @NonNull Builder setRuid(@NonNull Long setterArg) {
        this.ruid = setterArg;
        return this;
      }

      public @NonNull Forward build() {
        Forward pigeonReturn = new Forward();
        pigeonReturn.setProtocol(protocol);
        pigeonReturn.setDport(dport);
        pigeonReturn.setRaddr(raddr);
        pigeonReturn.setRport(rport);
        pigeonReturn.setRuid(ruid);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(5);
      toListResult.add(protocol);
      toListResult.add(dport);
      toListResult.add(raddr);
      toListResult.add(rport);
      toListResult.add(ruid);
      return toListResult;
    }

    static @NonNull Forward fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      Forward pigeonResult = new Forward();
      Object protocol = pigeonVar_list.get(0);
      pigeonResult.setProtocol((Long) protocol);
      Object dport = pigeonVar_list.get(1);
      pigeonResult.setDport((Long) dport);
      Object raddr = pigeonVar_list.get(2);
      pigeonResult.setRaddr((String) raddr);
      Object rport = pigeonVar_list.get(3);
      pigeonResult.setRport((Long) rport);
      Object ruid = pigeonVar_list.get(4);
      pigeonResult.setRuid((Long) ruid);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Packet {
    private @NonNull Long time;

    public @NonNull Long getTime() {
      return time;
    }

    public void setTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"time\" is null.");
      }
      this.time = setterArg;
    }

    private @NonNull Long version;

    public @NonNull Long getVersion() {
      return version;
    }

    public void setVersion(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"version\" is null.");
      }
      this.version = setterArg;
    }

    private @NonNull Long protocol;

    public @NonNull Long getProtocol() {
      return protocol;
    }

    public void setProtocol(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"protocol\" is null.");
      }
      this.protocol = setterArg;
    }

    private @NonNull String flags;

    public @NonNull String getFlags() {
      return flags;
    }

    public void setFlags(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"flags\" is null.");
      }
      this.flags = setterArg;
    }

    private @NonNull String saddr;

    public @NonNull String getSaddr() {
      return saddr;
    }

    public void setSaddr(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"saddr\" is null.");
      }
      this.saddr = setterArg;
    }

    private @NonNull Long sport;

    public @NonNull Long getSport() {
      return sport;
    }

    public void setSport(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sport\" is null.");
      }
      this.sport = setterArg;
    }

    private @NonNull String daddr;

    public @NonNull String getDaddr() {
      return daddr;
    }

    public void setDaddr(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"daddr\" is null.");
      }
      this.daddr = setterArg;
    }

    private @NonNull Long dport;

    public @NonNull Long getDport() {
      return dport;
    }

    public void setDport(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"dport\" is null.");
      }
      this.dport = setterArg;
    }

    private @NonNull String data;

    public @NonNull String getData() {
      return data;
    }

    public void setData(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"data\" is null.");
      }
      this.data = setterArg;
    }

    private @NonNull Long uid;

    public @NonNull Long getUid() {
      return uid;
    }

    public void setUid(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uid\" is null.");
      }
      this.uid = setterArg;
    }

    private @Nullable String packageName;

    public @Nullable String getPackageName() {
      return packageName;
    }

    public void setPackageName(@Nullable String setterArg) {
      this.packageName = setterArg;
    }

    private @NonNull Boolean allowed;

    public @NonNull Boolean getAllowed() {
      return allowed;
    }

    public void setAllowed(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"allowed\" is null.");
      }
      this.allowed = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Packet() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      Packet that = (Packet) o;
      return time.equals(that.time) && version.equals(that.version) && protocol.equals(that.protocol) && flags.equals(that.flags) && saddr.equals(that.saddr) && sport.equals(that.sport) && daddr.equals(that.daddr) && dport.equals(that.dport) && data.equals(that.data) && uid.equals(that.uid) && Objects.equals(packageName, that.packageName) && allowed.equals(that.allowed);
    }

    @Override
    public int hashCode() {
      return Objects.hash(time, version, protocol, flags, saddr, sport, daddr, dport, data, uid, packageName, allowed);
    }

    public static final class Builder {

      private @Nullable Long time;

      @CanIgnoreReturnValue
      public @NonNull Builder setTime(@NonNull Long setterArg) {
        this.time = setterArg;
        return this;
      }

      private @Nullable Long version;

      @CanIgnoreReturnValue
      public @NonNull Builder setVersion(@NonNull Long setterArg) {
        this.version = setterArg;
        return this;
      }

      private @Nullable Long protocol;

      @CanIgnoreReturnValue
      public @NonNull Builder setProtocol(@NonNull Long setterArg) {
        this.protocol = setterArg;
        return this;
      }

      private @Nullable String flags;

      @CanIgnoreReturnValue
      public @NonNull Builder setFlags(@NonNull String setterArg) {
        this.flags = setterArg;
        return this;
      }

      private @Nullable String saddr;

      @CanIgnoreReturnValue
      public @NonNull Builder setSaddr(@NonNull String setterArg) {
        this.saddr = setterArg;
        return this;
      }

      private @Nullable Long sport;

      @CanIgnoreReturnValue
      public @NonNull Builder setSport(@NonNull Long setterArg) {
        this.sport = setterArg;
        return this;
      }

      private @Nullable String daddr;

      @CanIgnoreReturnValue
      public @NonNull Builder setDaddr(@NonNull String setterArg) {
        this.daddr = setterArg;
        return this;
      }

      private @Nullable Long dport;

      @CanIgnoreReturnValue
      public @NonNull Builder setDport(@NonNull Long setterArg) {
        this.dport = setterArg;
        return this;
      }

      private @Nullable String data;

      @CanIgnoreReturnValue
      public @NonNull Builder setData(@NonNull String setterArg) {
        this.data = setterArg;
        return this;
      }

      private @Nullable Long uid;

      @CanIgnoreReturnValue
      public @NonNull Builder setUid(@NonNull Long setterArg) {
        this.uid = setterArg;
        return this;
      }

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@Nullable String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      private @Nullable Boolean allowed;

      @CanIgnoreReturnValue
      public @NonNull Builder setAllowed(@NonNull Boolean setterArg) {
        this.allowed = setterArg;
        return this;
      }

      public @NonNull Packet build() {
        Packet pigeonReturn = new Packet();
        pigeonReturn.setTime(time);
        pigeonReturn.setVersion(version);
        pigeonReturn.setProtocol(protocol);
        pigeonReturn.setFlags(flags);
        pigeonReturn.setSaddr(saddr);
        pigeonReturn.setSport(sport);
        pigeonReturn.setDaddr(daddr);
        pigeonReturn.setDport(dport);
        pigeonReturn.setData(data);
        pigeonReturn.setUid(uid);
        pigeonReturn.setPackageName(packageName);
        pigeonReturn.setAllowed(allowed);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(12);
      toListResult.add(time);
      toListResult.add(version);
      toListResult.add(protocol);
      toListResult.add(flags);
      toListResult.add(saddr);
      toListResult.add(sport);
      toListResult.add(daddr);
      toListResult.add(dport);
      toListResult.add(data);
      toListResult.add(uid);
      toListResult.add(packageName);
      toListResult.add(allowed);
      return toListResult;
    }

    static @NonNull Packet fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      Packet pigeonResult = new Packet();
      Object time = pigeonVar_list.get(0);
      pigeonResult.setTime((Long) time);
      Object version = pigeonVar_list.get(1);
      pigeonResult.setVersion((Long) version);
      Object protocol = pigeonVar_list.get(2);
      pigeonResult.setProtocol((Long) protocol);
      Object flags = pigeonVar_list.get(3);
      pigeonResult.setFlags((String) flags);
      Object saddr = pigeonVar_list.get(4);
      pigeonResult.setSaddr((String) saddr);
      Object sport = pigeonVar_list.get(5);
      pigeonResult.setSport((Long) sport);
      Object daddr = pigeonVar_list.get(6);
      pigeonResult.setDaddr((String) daddr);
      Object dport = pigeonVar_list.get(7);
      pigeonResult.setDport((Long) dport);
      Object data = pigeonVar_list.get(8);
      pigeonResult.setData((String) data);
      Object uid = pigeonVar_list.get(9);
      pigeonResult.setUid((Long) uid);
      Object packageName = pigeonVar_list.get(10);
      pigeonResult.setPackageName((String) packageName);
      Object allowed = pigeonVar_list.get(11);
      pigeonResult.setAllowed((Boolean) allowed);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class ResourceRecord {
    private @NonNull Long time;

    public @NonNull Long getTime() {
      return time;
    }

    public void setTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"time\" is null.");
      }
      this.time = setterArg;
    }

    private @NonNull String qName;

    public @NonNull String getQName() {
      return qName;
    }

    public void setQName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"qName\" is null.");
      }
      this.qName = setterArg;
    }

    private @NonNull String aName;

    public @NonNull String getAName() {
      return aName;
    }

    public void setAName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"aName\" is null.");
      }
      this.aName = setterArg;
    }

    private @NonNull String resource;

    public @NonNull String getResource() {
      return resource;
    }

    public void setResource(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"resource\" is null.");
      }
      this.resource = setterArg;
    }

    private @Nullable Long ttl;

    public @Nullable Long getTtl() {
      return ttl;
    }

    public void setTtl(@Nullable Long setterArg) {
      this.ttl = setterArg;
    }

    private @Nullable Long uid;

    public @Nullable Long getUid() {
      return uid;
    }

    public void setUid(@Nullable Long setterArg) {
      this.uid = setterArg;
    }

    private @Nullable String packageName;

    public @Nullable String getPackageName() {
      return packageName;
    }

    public void setPackageName(@Nullable String setterArg) {
      this.packageName = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    ResourceRecord() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      ResourceRecord that = (ResourceRecord) o;
      return time.equals(that.time) && qName.equals(that.qName) && aName.equals(that.aName) && resource.equals(that.resource) && Objects.equals(ttl, that.ttl) && Objects.equals(uid, that.uid) && Objects.equals(packageName, that.packageName);
    }

    @Override
    public int hashCode() {
      return Objects.hash(time, qName, aName, resource, ttl, uid, packageName);
    }

    public static final class Builder {

      private @Nullable Long time;

      @CanIgnoreReturnValue
      public @NonNull Builder setTime(@NonNull Long setterArg) {
        this.time = setterArg;
        return this;
      }

      private @Nullable String qName;

      @CanIgnoreReturnValue
      public @NonNull Builder setQName(@NonNull String setterArg) {
        this.qName = setterArg;
        return this;
      }

      private @Nullable String aName;

      @CanIgnoreReturnValue
      public @NonNull Builder setAName(@NonNull String setterArg) {
        this.aName = setterArg;
        return this;
      }

      private @Nullable String resource;

      @CanIgnoreReturnValue
      public @NonNull Builder setResource(@NonNull String setterArg) {
        this.resource = setterArg;
        return this;
      }

      private @Nullable Long ttl;

      @CanIgnoreReturnValue
      public @NonNull Builder setTtl(@Nullable Long setterArg) {
        this.ttl = setterArg;
        return this;
      }

      private @Nullable Long uid;

      @CanIgnoreReturnValue
      public @NonNull Builder setUid(@Nullable Long setterArg) {
        this.uid = setterArg;
        return this;
      }

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@Nullable String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      public @NonNull ResourceRecord build() {
        ResourceRecord pigeonReturn = new ResourceRecord();
        pigeonReturn.setTime(time);
        pigeonReturn.setQName(qName);
        pigeonReturn.setAName(aName);
        pigeonReturn.setResource(resource);
        pigeonReturn.setTtl(ttl);
        pigeonReturn.setUid(uid);
        pigeonReturn.setPackageName(packageName);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(7);
      toListResult.add(time);
      toListResult.add(qName);
      toListResult.add(aName);
      toListResult.add(resource);
      toListResult.add(ttl);
      toListResult.add(uid);
      toListResult.add(packageName);
      return toListResult;
    }

    static @NonNull ResourceRecord fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      ResourceRecord pigeonResult = new ResourceRecord();
      Object time = pigeonVar_list.get(0);
      pigeonResult.setTime((Long) time);
      Object qName = pigeonVar_list.get(1);
      pigeonResult.setQName((String) qName);
      Object aName = pigeonVar_list.get(2);
      pigeonResult.setAName((String) aName);
      Object resource = pigeonVar_list.get(3);
      pigeonResult.setResource((String) resource);
      Object ttl = pigeonVar_list.get(4);
      pigeonResult.setTtl((Long) ttl);
      Object uid = pigeonVar_list.get(5);
      pigeonResult.setUid((Long) uid);
      Object packageName = pigeonVar_list.get(6);
      pigeonResult.setPackageName((String) packageName);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Rule {
    private @Nullable String packageName;

    public @Nullable String getPackageName() {
      return packageName;
    }

    public void setPackageName(@Nullable String setterArg) {
      this.packageName = setterArg;
    }

    private @NonNull List<String> blockedHosts;

    public @NonNull List<String> getBlockedHosts() {
      return blockedHosts;
    }

    public void setBlockedHosts(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"blockedHosts\" is null.");
      }
      this.blockedHosts = setterArg;
    }

    private @NonNull List<String> blockedIPs;

    public @NonNull List<String> getBlockedIPs() {
      return blockedIPs;
    }

    public void setBlockedIPs(@NonNull List<String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"blockedIPs\" is null.");
      }
      this.blockedIPs = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Rule() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      Rule that = (Rule) o;
      return Objects.equals(packageName, that.packageName) && blockedHosts.equals(that.blockedHosts) && blockedIPs.equals(that.blockedIPs);
    }

    @Override
    public int hashCode() {
      return Objects.hash(packageName, blockedHosts, blockedIPs);
    }

    public static final class Builder {

      private @Nullable String packageName;

      @CanIgnoreReturnValue
      public @NonNull Builder setPackageName(@Nullable String setterArg) {
        this.packageName = setterArg;
        return this;
      }

      private @Nullable List<String> blockedHosts;

      @CanIgnoreReturnValue
      public @NonNull Builder setBlockedHosts(@NonNull List<String> setterArg) {
        this.blockedHosts = setterArg;
        return this;
      }

      private @Nullable List<String> blockedIPs;

      @CanIgnoreReturnValue
      public @NonNull Builder setBlockedIPs(@NonNull List<String> setterArg) {
        this.blockedIPs = setterArg;
        return this;
      }

      public @NonNull Rule build() {
        Rule pigeonReturn = new Rule();
        pigeonReturn.setPackageName(packageName);
        pigeonReturn.setBlockedHosts(blockedHosts);
        pigeonReturn.setBlockedIPs(blockedIPs);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(3);
      toListResult.add(packageName);
      toListResult.add(blockedHosts);
      toListResult.add(blockedIPs);
      return toListResult;
    }

    static @NonNull Rule fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      Rule pigeonResult = new Rule();
      Object packageName = pigeonVar_list.get(0);
      pigeonResult.setPackageName((String) packageName);
      Object blockedHosts = pigeonVar_list.get(1);
      pigeonResult.setBlockedHosts((List<String>) blockedHosts);
      Object blockedIPs = pigeonVar_list.get(2);
      pigeonResult.setBlockedIPs((List<String>) blockedIPs);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Usage {
    private @NonNull Long time;

    public @NonNull Long getTime() {
      return time;
    }

    public void setTime(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"time\" is null.");
      }
      this.time = setterArg;
    }

    private @NonNull Long version;

    public @NonNull Long getVersion() {
      return version;
    }

    public void setVersion(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"version\" is null.");
      }
      this.version = setterArg;
    }

    private @NonNull Long protocol;

    public @NonNull Long getProtocol() {
      return protocol;
    }

    public void setProtocol(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"protocol\" is null.");
      }
      this.protocol = setterArg;
    }

    private @NonNull String daddr;

    public @NonNull String getDaddr() {
      return daddr;
    }

    public void setDaddr(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"daddr\" is null.");
      }
      this.daddr = setterArg;
    }

    private @NonNull Long dport;

    public @NonNull Long getDport() {
      return dport;
    }

    public void setDport(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"dport\" is null.");
      }
      this.dport = setterArg;
    }

    private @NonNull Long uid;

    public @NonNull Long getUid() {
      return uid;
    }

    public void setUid(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uid\" is null.");
      }
      this.uid = setterArg;
    }

    private @NonNull Long sent;

    public @NonNull Long getSent() {
      return sent;
    }

    public void setSent(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sent\" is null.");
      }
      this.sent = setterArg;
    }

    private @NonNull Long received;

    public @NonNull Long getReceived() {
      return received;
    }

    public void setReceived(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"received\" is null.");
      }
      this.received = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Usage() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      Usage that = (Usage) o;
      return time.equals(that.time) && version.equals(that.version) && protocol.equals(that.protocol) && daddr.equals(that.daddr) && dport.equals(that.dport) && uid.equals(that.uid) && sent.equals(that.sent) && received.equals(that.received);
    }

    @Override
    public int hashCode() {
      return Objects.hash(time, version, protocol, daddr, dport, uid, sent, received);
    }

    public static final class Builder {

      private @Nullable Long time;

      @CanIgnoreReturnValue
      public @NonNull Builder setTime(@NonNull Long setterArg) {
        this.time = setterArg;
        return this;
      }

      private @Nullable Long version;

      @CanIgnoreReturnValue
      public @NonNull Builder setVersion(@NonNull Long setterArg) {
        this.version = setterArg;
        return this;
      }

      private @Nullable Long protocol;

      @CanIgnoreReturnValue
      public @NonNull Builder setProtocol(@NonNull Long setterArg) {
        this.protocol = setterArg;
        return this;
      }

      private @Nullable String daddr;

      @CanIgnoreReturnValue
      public @NonNull Builder setDaddr(@NonNull String setterArg) {
        this.daddr = setterArg;
        return this;
      }

      private @Nullable Long dport;

      @CanIgnoreReturnValue
      public @NonNull Builder setDport(@NonNull Long setterArg) {
        this.dport = setterArg;
        return this;
      }

      private @Nullable Long uid;

      @CanIgnoreReturnValue
      public @NonNull Builder setUid(@NonNull Long setterArg) {
        this.uid = setterArg;
        return this;
      }

      private @Nullable Long sent;

      @CanIgnoreReturnValue
      public @NonNull Builder setSent(@NonNull Long setterArg) {
        this.sent = setterArg;
        return this;
      }

      private @Nullable Long received;

      @CanIgnoreReturnValue
      public @NonNull Builder setReceived(@NonNull Long setterArg) {
        this.received = setterArg;
        return this;
      }

      public @NonNull Usage build() {
        Usage pigeonReturn = new Usage();
        pigeonReturn.setTime(time);
        pigeonReturn.setVersion(version);
        pigeonReturn.setProtocol(protocol);
        pigeonReturn.setDaddr(daddr);
        pigeonReturn.setDport(dport);
        pigeonReturn.setUid(uid);
        pigeonReturn.setSent(sent);
        pigeonReturn.setReceived(received);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(8);
      toListResult.add(time);
      toListResult.add(version);
      toListResult.add(protocol);
      toListResult.add(daddr);
      toListResult.add(dport);
      toListResult.add(uid);
      toListResult.add(sent);
      toListResult.add(received);
      return toListResult;
    }

    static @NonNull Usage fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      Usage pigeonResult = new Usage();
      Object time = pigeonVar_list.get(0);
      pigeonResult.setTime((Long) time);
      Object version = pigeonVar_list.get(1);
      pigeonResult.setVersion((Long) version);
      Object protocol = pigeonVar_list.get(2);
      pigeonResult.setProtocol((Long) protocol);
      Object daddr = pigeonVar_list.get(3);
      pigeonResult.setDaddr((String) daddr);
      Object dport = pigeonVar_list.get(4);
      pigeonResult.setDport((Long) dport);
      Object uid = pigeonVar_list.get(5);
      pigeonResult.setUid((Long) uid);
      Object sent = pigeonVar_list.get(6);
      pigeonResult.setSent((Long) sent);
      Object received = pigeonVar_list.get(7);
      pigeonResult.setReceived((Long) received);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Version {
    private @NonNull String version;

    public @NonNull String getVersion() {
      return version;
    }

    public void setVersion(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"version\" is null.");
      }
      this.version = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    Version() {}

    @Override
    public boolean equals(Object o) {
      if (this == o) { return true; }
      if (o == null || getClass() != o.getClass()) { return false; }
      Version that = (Version) o;
      return version.equals(that.version);
    }

    @Override
    public int hashCode() {
      return Objects.hash(version);
    }

    public static final class Builder {

      private @Nullable String version;

      @CanIgnoreReturnValue
      public @NonNull Builder setVersion(@NonNull String setterArg) {
        this.version = setterArg;
        return this;
      }

      public @NonNull Version build() {
        Version pigeonReturn = new Version();
        pigeonReturn.setVersion(version);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<>(1);
      toListResult.add(version);
      return toListResult;
    }

    static @NonNull Version fromList(@NonNull ArrayList<Object> pigeonVar_list) {
      Version pigeonResult = new Version();
      Object version = pigeonVar_list.get(0);
      pigeonResult.setVersion((String) version);
      return pigeonResult;
    }
  }

  private static class PigeonCodec extends StandardMessageCodec {
    public static final PigeonCodec INSTANCE = new PigeonCodec();

    private PigeonCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 129:
          return VpnConfig.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return Application.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return ApplicationSetting.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return Forward.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return Packet.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return ResourceRecord.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return Rule.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return Usage.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return Version.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof VpnConfig) {
        stream.write(129);
        writeValue(stream, ((VpnConfig) value).toList());
      } else if (value instanceof Application) {
        stream.write(130);
        writeValue(stream, ((Application) value).toList());
      } else if (value instanceof ApplicationSetting) {
        stream.write(131);
        writeValue(stream, ((ApplicationSetting) value).toList());
      } else if (value instanceof Forward) {
        stream.write(132);
        writeValue(stream, ((Forward) value).toList());
      } else if (value instanceof Packet) {
        stream.write(133);
        writeValue(stream, ((Packet) value).toList());
      } else if (value instanceof ResourceRecord) {
        stream.write(134);
        writeValue(stream, ((ResourceRecord) value).toList());
      } else if (value instanceof Rule) {
        stream.write(135);
        writeValue(stream, ((Rule) value).toList());
      } else if (value instanceof Usage) {
        stream.write(136);
        writeValue(stream, ((Usage) value).toList());
      } else if (value instanceof Version) {
        stream.write(137);
        writeValue(stream, ((Version) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }


  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface VpnController {

    void startVpn(@NonNull VpnConfig settings);

    void stopVpn();

    @NonNull 
    Boolean isRunning();

    void updateSettings(@NonNull VpnConfig settings);

    @NonNull 
    List<Application> getApplications();

    /** The codec used by VpnController. */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    /**Sets up an instance of `VpnController` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable VpnController api) {
      setUp(binaryMessenger, "", api);
    }
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @NonNull String messageChannelSuffix, @Nullable VpnController api) {
      messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_example_package.VpnController.startVpn" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                VpnConfig settingsArg = (VpnConfig) args.get(0);
                try {
                  api.startVpn(settingsArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_example_package.VpnController.stopVpn" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  api.stopVpn();
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_example_package.VpnController.isRunning" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  Boolean output = api.isRunning();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_example_package.VpnController.updateSettings" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                VpnConfig settingsArg = (VpnConfig) args.get(0);
                try {
                  api.updateSettings(settingsArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.pigeon_example_package.VpnController.getApplications" + messageChannelSuffix, getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<>();
                try {
                  List<Application> output = api.getApplications();
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  wrapped = wrapError(exception);
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  /** Generated class from Pigeon that represents Flutter messages that can be called from Java. */
  public static class VpnEventHandler {
    private final @NonNull BinaryMessenger binaryMessenger;
    private final String messageChannelSuffix;

    public VpnEventHandler(@NonNull BinaryMessenger argBinaryMessenger) {
      this(argBinaryMessenger, "");
    }
    public VpnEventHandler(@NonNull BinaryMessenger argBinaryMessenger, @NonNull String messageChannelSuffix) {
      this.binaryMessenger = argBinaryMessenger;
      this.messageChannelSuffix = messageChannelSuffix.isEmpty() ? "" : "." + messageChannelSuffix;
    }

    /**
     * Public interface for sending reply.
     * The codec used by VpnEventHandler.
     */
    static @NonNull MessageCodec<Object> getCodec() {
      return PigeonCodec.INSTANCE;
    }
    public void logText(@NonNull String messageArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.logText" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(messageArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void logError(@NonNull String errorCodeArg, @NonNull String messageArg, @NonNull Object detailsArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.logError" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Arrays.asList(errorCodeArg, messageArg, detailsArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void updateVpnState(@NonNull Boolean runningArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.updateVpnState" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(runningArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void logPacket(@NonNull Packet packetArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.logPacket" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(packetArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
    public void logDns(@NonNull ResourceRecord recordArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.logDns" + messageChannelSuffix;
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<>(Collections.singletonList(recordArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
