// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}

List<Object?> wrapResponse({Object? result, PlatformException? error, bool empty = false}) {
  if (empty) {
    return <Object?>[];
  }
  if (error == null) {
    return <Object?>[result];
  }
  return <Object?>[error.code, error.message, error.details];
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


/// MODELS
class VpnSettings {
  VpnSettings({
    this.blockTraffic = false,
  });

  bool blockTraffic;

  List<Object?> _toList() {
    return <Object?>[
      blockTraffic,
    ];
  }

  Object encode() {
    return _toList();  }

  static VpnSettings decode(Object result) {
    result as List<Object?>;
    return VpnSettings(
      blockTraffic: result[0]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! VpnSettings || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class Allowed {
  Allowed({
    this.raddr = null,
    this.rport = null,
  });

  String? raddr;

  int? rport;

  List<Object?> _toList() {
    return <Object?>[
      raddr,
      rport,
    ];
  }

  Object encode() {
    return _toList();  }

  static Allowed decode(Object result) {
    result as List<Object?>;
    return Allowed(
      raddr: result[0] as String?,
      rport: result[1] as int?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Allowed || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class Forward {
  Forward({
    this.protocol = -1,
    this.dport = -1,
    this.raddr = "",
    this.rport = -1,
    this.ruid = -1,
  });

  int protocol;

  int dport;

  String raddr;

  int rport;

  int ruid;

  List<Object?> _toList() {
    return <Object?>[
      protocol,
      dport,
      raddr,
      rport,
      ruid,
    ];
  }

  Object encode() {
    return _toList();  }

  static Forward decode(Object result) {
    result as List<Object?>;
    return Forward(
      protocol: result[0]! as int,
      dport: result[1]! as int,
      raddr: result[2]! as String,
      rport: result[3]! as int,
      ruid: result[4]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Forward || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class Packet {
  Packet({
    this.time = 0,
    this.version = 0,
    this.protocol = 0,
    this.flags = "",
    this.saddr = "",
    this.sport = 0,
    this.daddr = "",
    this.dport = 0,
    this.data = "",
    this.uid = 0,
    this.allowed = true,
  });

  int time;

  int version;

  int protocol;

  String flags;

  String saddr;

  int sport;

  String daddr;

  int dport;

  String data;

  int uid;

  bool allowed;

  List<Object?> _toList() {
    return <Object?>[
      time,
      version,
      protocol,
      flags,
      saddr,
      sport,
      daddr,
      dport,
      data,
      uid,
      allowed,
    ];
  }

  Object encode() {
    return _toList();  }

  static Packet decode(Object result) {
    result as List<Object?>;
    return Packet(
      time: result[0]! as int,
      version: result[1]! as int,
      protocol: result[2]! as int,
      flags: result[3]! as String,
      saddr: result[4]! as String,
      sport: result[5]! as int,
      daddr: result[6]! as String,
      dport: result[7]! as int,
      data: result[8]! as String,
      uid: result[9]! as int,
      allowed: result[10]! as bool,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Packet || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class ResourceRecord {
  ResourceRecord({
    this.time = 0,
    this.qName = "",
    this.aName = "",
    this.resource = "",
    this.ttl = 0,
    this.uid = -1,
  });

  int time;

  String qName;

  String aName;

  String resource;

  int ttl;

  int uid;

  List<Object?> _toList() {
    return <Object?>[
      time,
      qName,
      aName,
      resource,
      ttl,
      uid,
    ];
  }

  Object encode() {
    return _toList();  }

  static ResourceRecord decode(Object result) {
    result as List<Object?>;
    return ResourceRecord(
      time: result[0]! as int,
      qName: result[1]! as String,
      aName: result[2]! as String,
      resource: result[3]! as String,
      ttl: result[4]! as int,
      uid: result[5]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! ResourceRecord || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class Usage {
  Usage({
    this.time = 0,
    this.version = 0,
    this.protocol = 0,
    this.daddr = "",
    this.dport = 0,
    this.uid = 0,
    this.sent = 0,
    this.received = 0,
  });

  int time;

  int version;

  int protocol;

  String daddr;

  int dport;

  int uid;

  int sent;

  int received;

  List<Object?> _toList() {
    return <Object?>[
      time,
      version,
      protocol,
      daddr,
      dport,
      uid,
      sent,
      received,
    ];
  }

  Object encode() {
    return _toList();  }

  static Usage decode(Object result) {
    result as List<Object?>;
    return Usage(
      time: result[0]! as int,
      version: result[1]! as int,
      protocol: result[2]! as int,
      daddr: result[3]! as String,
      dport: result[4]! as int,
      uid: result[5]! as int,
      sent: result[6]! as int,
      received: result[7]! as int,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Usage || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}

class Version {
  Version({
    required this.version,
  });

  String version;

  List<Object?> _toList() {
    return <Object?>[
      version,
    ];
  }

  Object encode() {
    return _toList();  }

  static Version decode(Object result) {
    result as List<Object?>;
    return Version(
      version: result[0]! as String,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! Version || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is VpnSettings) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    }    else if (value is Allowed) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    }    else if (value is Forward) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    }    else if (value is Packet) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    }    else if (value is ResourceRecord) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    }    else if (value is Usage) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    }    else if (value is Version) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return VpnSettings.decode(readValue(buffer)!);
      case 130: 
        return Allowed.decode(readValue(buffer)!);
      case 131: 
        return Forward.decode(readValue(buffer)!);
      case 132: 
        return Packet.decode(readValue(buffer)!);
      case 133: 
        return ResourceRecord.decode(readValue(buffer)!);
      case 134: 
        return Usage.decode(readValue(buffer)!);
      case 135: 
        return Version.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class VpnController {
  /// Constructor for [VpnController].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  VpnController({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> startVpn(VpnSettings settings) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_example_package.VpnController.startVpn$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[settings]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> stopVpn() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_example_package.VpnController.stopVpn$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<bool> isRunning() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_example_package.VpnController.isRunning$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as bool?)!;
    }
  }

  Future<void> updateSettings(VpnSettings settings) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.pigeon_example_package.VpnController.updateSettings$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[settings]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

abstract class VpnEventHandler {
  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  void logText(String message);

  void logError(String errorCode, String message, Object details);

  void sendEvent(Packet packet);

  static void setUp(VpnEventHandler? api, {BinaryMessenger? binaryMessenger, String messageChannelSuffix = '',}) {
    messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.logText$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.logText was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_message = (args[0] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.logText was null, expected non-null String.');
          try {
            api.logText(arg_message!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.logError$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.logError was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_errorCode = (args[0] as String?);
          assert(arg_errorCode != null,
              'Argument for dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.logError was null, expected non-null String.');
          final String? arg_message = (args[1] as String?);
          assert(arg_message != null,
              'Argument for dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.logError was null, expected non-null String.');
          final Object? arg_details = (args[2] as Object?);
          assert(arg_details != null,
              'Argument for dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.logError was null, expected non-null Object.');
          try {
            api.logError(arg_errorCode!, arg_message!, arg_details!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
    {
      final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.sendEvent$messageChannelSuffix', pigeonChannelCodec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        pigeonVar_channel.setMessageHandler(null);
      } else {
        pigeonVar_channel.setMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.sendEvent was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Packet? arg_packet = (args[0] as Packet?);
          assert(arg_packet != null,
              'Argument for dev.flutter.pigeon.pigeon_example_package.VpnEventHandler.sendEvent was null, expected non-null Packet.');
          try {
            api.sendEvent(arg_packet!);
            return wrapResponse(empty: true);
          } on PlatformException catch (e) {
            return wrapResponse(error: e);
          }          catch (e) {
            return wrapResponse(error: PlatformException(code: 'error', message: e.toString()));
          }
        });
      }
    }
  }
}
